# -*- coding: utf-8 -*-
"""Coursera_Foundation_Module_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WJDQ-HJ94uOgYfOTXs_IRb7D-6QRKfkr
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

data_file = '/content/drive/MyDrive/Colab Notebooks/Coursera_Foundation/Module 2/home_data.csv'

sales = pd.read_csv(data_file)

sales.head()

sales.info()

my_features = ['bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'zipcode']

from sklearn.model_selection import train_test_split
data_train, data_test = train_test_split(sales, test_size=0.2, random_state=0)

x = data_train['sqft_living']
y = data_train['price']

plt.plot(x, y, '.')
plt.xlabel('sqft_living')
plt.ylabel('price')

from sklearn.linear_model import LinearRegression as lr

lr_model = lr()

lr_model.fit(x.values.reshape(-1, 1), y)
print(f" w0 = {lr_model.intercept_:.3f}") #w0
print(f" w1 = {lr_model.coef_[0]:.3f}") #w1

y_hat = lr_model.predict(x.values.reshape(-1, 1))
rss = np.sum((y -y_hat)**2)
rss_train = rss / len(y)
print(f" RSS (train) = {rss_train:.3f}")

from sklearn.metrics import mean_squared_error
mean_squared_error(y, y_hat)

rmse_train = np.sqrt(rss / len(y))
print(f" RMSE (train) = {rmse_train:.3f}")

plt.plot(x, y, '.', x, y_hat)
plt.xlabel('sqft_living')
plt.ylabel('price')

x = data_test['sqft_living']
y = data_test['price']

y_hat = lr_model.predict(x.values.reshape(-1, 1))
rss_test = np.sum((y -y_hat)**2)
print(f" RSS (test) = {rss_test:.3f}")

rmse_test = np.sqrt(rss / len(y))
print(f" RMSE (test) = {rmse_test:.3f}")

plt.plot(x, y, '.', x, y_hat)
plt.xlabel('sqft_living')
plt.ylabel('price')
plt.title('test predction')
plt.show()

my_features = ['bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'zipcode']
x = data_train[my_features]
y = data_train['price']

"""1. print(f" w1 = {lr_model.coef_[0]:.3f}") #w1
2. print(f" w2 = {lr_model.coef_[1]:.3f}") #w2
3. print(f" w3 = {lr_model.coef_[2]:.3f}") #w3
4. print(f" w4 = {lr_model.coef_[3]:.3f}") #w4
5. print(f" w5 = {lr_model.coef_[4]:.3f}") #w5
6. print(f" w6 = {lr_model.coef_[5]:.3f}") #w6
"""

lr_model.fit(x.values, y)
print(f" w0 = {lr_model.intercept_:.3f}") # w0
for i, coef in enumerate(lr_model.coef_):
  print(f"w{i+1} = {coef:.3f}") # wi

sales_more_2000 = sales[sales['sqft_living'] > 2000]

sales_more_2000_less_4000 = sales_more_2000[sales_more_2000['sqft_living'] <= 4000]

sales_more_2000_less_4000.info()

x = sales_more_2000_less_4000[my_features]
y = sales_more_2000_less_4000['price']

lr_model.fit(x.values, y)

y_hat = lr_model.predict(x.values)
rss_test = np.sum((y -y_hat)**2)
print(f" RSS (test) = {rss_test:.3f}")

rmse_test = np.sqrt(rss / len(y))
print(f" RMSE (test) = {rmse_test:.3f}")

